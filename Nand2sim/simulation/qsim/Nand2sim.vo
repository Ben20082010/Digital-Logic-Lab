// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Standard Edition"

// DATE "11/28/2017 15:06:12"

// 
// Device: Altera EP4CE6E22C6 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module Nand2sim (
	X,
	B,
	A);
output 	X;
input 	B;
input 	A;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \X~output_o ;
wire \B~input_o ;
wire \A~input_o ;
wire \NAND~combout ;


cycloneive_io_obuf \X~output (
	.i(!\NAND~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\X~output_o ),
	.obar());
// synopsys translate_off
defparam \X~output .bus_hold = "false";
defparam \X~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \B~input (
	.i(B),
	.ibar(gnd),
	.o(\B~input_o ));
// synopsys translate_off
defparam \B~input .bus_hold = "false";
defparam \B~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \A~input (
	.i(A),
	.ibar(gnd),
	.o(\A~input_o ));
// synopsys translate_off
defparam \A~input .bus_hold = "false";
defparam \A~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \NAND (
// Equation(s):
// \NAND~combout  = (\B~input_o  & \A~input_o )

	.dataa(\B~input_o ),
	.datab(\A~input_o ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\NAND~combout ),
	.cout());
// synopsys translate_off
defparam \NAND .lut_mask = 16'h8888;
defparam \NAND .sum_lutc_input = "datac";
// synopsys translate_on

assign X = \X~output_o ;

endmodule
