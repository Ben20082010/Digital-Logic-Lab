// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Standard Edition"

// DATE "12/01/2017 17:03:46"

// 
// Device: Altera EP4CE6E22C6 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module extALU (
	Carry_out,
	SUB,
	A,
	B,
	B_is_1,
	S);
output 	Carry_out;
input 	SUB;
input 	[3:0] A;
input 	[3:0] B;
input 	B_is_1;
output 	[3:0] S;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Carry_out~output_o ;
wire \S[3]~output_o ;
wire \S[2]~output_o ;
wire \S[1]~output_o ;
wire \S[0]~output_o ;
wire \A[1]~input_o ;
wire \SUB~input_o ;
wire \B_is_1~input_o ;
wire \B[1]~input_o ;
wire \inst1|inst1[1]~0_combout ;
wire \A[0]~input_o ;
wire \B[0]~input_o ;
wire \inst1|inst|inst|inst~0_combout ;
wire \inst1|inst|inst1|inst~combout ;
wire \A[2]~input_o ;
wire \B[2]~input_o ;
wire \inst1|inst1[2]~1_combout ;
wire \inst1|inst|inst2|inst~combout ;
wire \A[3]~input_o ;
wire \B[3]~input_o ;
wire \inst1|inst1[3]~2_combout ;
wire \inst1|inst|inst3|inst~combout ;
wire \inst1|inst|inst3|inst2|AND_INV~0_combout ;
wire \inst1|inst|inst2|inst2|AND_INV~0_combout ;
wire \inst1|inst|inst1|inst2|AND_INV~0_combout ;
wire \inst1|inst|inst|inst3|AND_INV~0_combout ;


cycloneive_io_obuf \Carry_out~output (
	.i(\inst1|inst|inst3|inst~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Carry_out~output_o ),
	.obar());
// synopsys translate_off
defparam \Carry_out~output .bus_hold = "false";
defparam \Carry_out~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \S[3]~output (
	.i(\inst1|inst|inst3|inst2|AND_INV~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[3]~output .bus_hold = "false";
defparam \S[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \S[2]~output (
	.i(\inst1|inst|inst2|inst2|AND_INV~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[2]~output .bus_hold = "false";
defparam \S[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \S[1]~output (
	.i(\inst1|inst|inst1|inst2|AND_INV~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[1]~output .bus_hold = "false";
defparam \S[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \S[0]~output (
	.i(\inst1|inst|inst|inst3|AND_INV~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[0]~output .bus_hold = "false";
defparam \S[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \A[1]~input (
	.i(A[1]),
	.ibar(gnd),
	.o(\A[1]~input_o ));
// synopsys translate_off
defparam \A[1]~input .bus_hold = "false";
defparam \A[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \SUB~input (
	.i(SUB),
	.ibar(gnd),
	.o(\SUB~input_o ));
// synopsys translate_off
defparam \SUB~input .bus_hold = "false";
defparam \SUB~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \B_is_1~input (
	.i(B_is_1),
	.ibar(gnd),
	.o(\B_is_1~input_o ));
// synopsys translate_off
defparam \B_is_1~input .bus_hold = "false";
defparam \B_is_1~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \B[1]~input (
	.i(B[1]),
	.ibar(gnd),
	.o(\B[1]~input_o ));
// synopsys translate_off
defparam \B[1]~input .bus_hold = "false";
defparam \B[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst1|inst1[1]~0 (
// Equation(s):
// \inst1|inst1[1]~0_combout  = \SUB~input_o  $ (((!\B_is_1~input_o  & \B[1]~input_o )))

	.dataa(\SUB~input_o ),
	.datab(\B_is_1~input_o ),
	.datac(gnd),
	.datad(\B[1]~input_o ),
	.cin(gnd),
	.combout(\inst1|inst1[1]~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst1[1]~0 .lut_mask = 16'h99AA;
defparam \inst1|inst1[1]~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \A[0]~input (
	.i(A[0]),
	.ibar(gnd),
	.o(\A[0]~input_o ));
// synopsys translate_off
defparam \A[0]~input .bus_hold = "false";
defparam \A[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \B[0]~input (
	.i(B[0]),
	.ibar(gnd),
	.o(\B[0]~input_o ));
// synopsys translate_off
defparam \B[0]~input .bus_hold = "false";
defparam \B[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst1|inst|inst|inst~0 (
// Equation(s):
// \inst1|inst|inst|inst~0_combout  = (\B_is_1~input_o  & (\A[0]~input_o )) # (!\B_is_1~input_o  & ((\B[0]~input_o  & (\A[0]~input_o )) # (!\B[0]~input_o  & ((\SUB~input_o )))))

	.dataa(\A[0]~input_o ),
	.datab(\SUB~input_o ),
	.datac(\B_is_1~input_o ),
	.datad(\B[0]~input_o ),
	.cin(gnd),
	.combout(\inst1|inst|inst|inst~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst|inst|inst~0 .lut_mask = 16'hAAAC;
defparam \inst1|inst|inst|inst~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst1|inst|inst1|inst (
// Equation(s):
// \inst1|inst|inst1|inst~combout  = (\A[1]~input_o  & ((\inst1|inst1[1]~0_combout ) # (\inst1|inst|inst|inst~0_combout ))) # (!\A[1]~input_o  & (\inst1|inst1[1]~0_combout  & \inst1|inst|inst|inst~0_combout ))

	.dataa(\A[1]~input_o ),
	.datab(\inst1|inst1[1]~0_combout ),
	.datac(\inst1|inst|inst|inst~0_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst1|inst|inst1|inst~combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst|inst1|inst .lut_mask = 16'hE8E8;
defparam \inst1|inst|inst1|inst .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \A[2]~input (
	.i(A[2]),
	.ibar(gnd),
	.o(\A[2]~input_o ));
// synopsys translate_off
defparam \A[2]~input .bus_hold = "false";
defparam \A[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \B[2]~input (
	.i(B[2]),
	.ibar(gnd),
	.o(\B[2]~input_o ));
// synopsys translate_off
defparam \B[2]~input .bus_hold = "false";
defparam \B[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst1|inst1[2]~1 (
// Equation(s):
// \inst1|inst1[2]~1_combout  = \SUB~input_o  $ (((!\B_is_1~input_o  & \B[2]~input_o )))

	.dataa(\SUB~input_o ),
	.datab(\B_is_1~input_o ),
	.datac(gnd),
	.datad(\B[2]~input_o ),
	.cin(gnd),
	.combout(\inst1|inst1[2]~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst1[2]~1 .lut_mask = 16'h99AA;
defparam \inst1|inst1[2]~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst1|inst|inst2|inst (
// Equation(s):
// \inst1|inst|inst2|inst~combout  = (\inst1|inst|inst1|inst~combout  & ((\A[2]~input_o ) # (\inst1|inst1[2]~1_combout ))) # (!\inst1|inst|inst1|inst~combout  & (\A[2]~input_o  & \inst1|inst1[2]~1_combout ))

	.dataa(\inst1|inst|inst1|inst~combout ),
	.datab(\A[2]~input_o ),
	.datac(\inst1|inst1[2]~1_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst1|inst|inst2|inst~combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst|inst2|inst .lut_mask = 16'hE8E8;
defparam \inst1|inst|inst2|inst .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \A[3]~input (
	.i(A[3]),
	.ibar(gnd),
	.o(\A[3]~input_o ));
// synopsys translate_off
defparam \A[3]~input .bus_hold = "false";
defparam \A[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \B[3]~input (
	.i(B[3]),
	.ibar(gnd),
	.o(\B[3]~input_o ));
// synopsys translate_off
defparam \B[3]~input .bus_hold = "false";
defparam \B[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst1|inst1[3]~2 (
// Equation(s):
// \inst1|inst1[3]~2_combout  = \SUB~input_o  $ (((!\B_is_1~input_o  & \B[3]~input_o )))

	.dataa(\SUB~input_o ),
	.datab(\B_is_1~input_o ),
	.datac(gnd),
	.datad(\B[3]~input_o ),
	.cin(gnd),
	.combout(\inst1|inst1[3]~2_combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst1[3]~2 .lut_mask = 16'h99AA;
defparam \inst1|inst1[3]~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst1|inst|inst3|inst (
// Equation(s):
// \inst1|inst|inst3|inst~combout  = (\inst1|inst|inst2|inst~combout  & ((\A[3]~input_o ) # (\inst1|inst1[3]~2_combout ))) # (!\inst1|inst|inst2|inst~combout  & (\A[3]~input_o  & \inst1|inst1[3]~2_combout ))

	.dataa(\inst1|inst|inst2|inst~combout ),
	.datab(\A[3]~input_o ),
	.datac(\inst1|inst1[3]~2_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst1|inst|inst3|inst~combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst|inst3|inst .lut_mask = 16'hE8E8;
defparam \inst1|inst|inst3|inst .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst1|inst|inst3|inst2|AND_INV~0 (
// Equation(s):
// \inst1|inst|inst3|inst2|AND_INV~0_combout  = \inst1|inst|inst2|inst~combout  $ (\A[3]~input_o  $ (\inst1|inst1[3]~2_combout ))

	.dataa(\inst1|inst|inst2|inst~combout ),
	.datab(\A[3]~input_o ),
	.datac(\inst1|inst1[3]~2_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst1|inst|inst3|inst2|AND_INV~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst|inst3|inst2|AND_INV~0 .lut_mask = 16'h9696;
defparam \inst1|inst|inst3|inst2|AND_INV~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst1|inst|inst2|inst2|AND_INV~0 (
// Equation(s):
// \inst1|inst|inst2|inst2|AND_INV~0_combout  = \inst1|inst|inst1|inst~combout  $ (\A[2]~input_o  $ (\inst1|inst1[2]~1_combout ))

	.dataa(\inst1|inst|inst1|inst~combout ),
	.datab(\A[2]~input_o ),
	.datac(\inst1|inst1[2]~1_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst1|inst|inst2|inst2|AND_INV~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst|inst2|inst2|AND_INV~0 .lut_mask = 16'h9696;
defparam \inst1|inst|inst2|inst2|AND_INV~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst1|inst|inst1|inst2|AND_INV~0 (
// Equation(s):
// \inst1|inst|inst1|inst2|AND_INV~0_combout  = \A[1]~input_o  $ (\inst1|inst1[1]~0_combout  $ (\inst1|inst|inst|inst~0_combout ))

	.dataa(\A[1]~input_o ),
	.datab(\inst1|inst1[1]~0_combout ),
	.datac(\inst1|inst|inst|inst~0_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst1|inst|inst1|inst2|AND_INV~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst|inst1|inst2|AND_INV~0 .lut_mask = 16'h9696;
defparam \inst1|inst|inst1|inst2|AND_INV~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst1|inst|inst|inst3|AND_INV~0 (
// Equation(s):
// \inst1|inst|inst|inst3|AND_INV~0_combout  = \A[0]~input_o  $ (((\B_is_1~input_o ) # (\B[0]~input_o )))

	.dataa(gnd),
	.datab(\B_is_1~input_o ),
	.datac(\B[0]~input_o ),
	.datad(\A[0]~input_o ),
	.cin(gnd),
	.combout(\inst1|inst|inst|inst3|AND_INV~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst1|inst|inst|inst3|AND_INV~0 .lut_mask = 16'h03FC;
defparam \inst1|inst|inst|inst3|AND_INV~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign Carry_out = \Carry_out~output_o ;

assign S[3] = \S[3]~output_o ;

assign S[2] = \S[2]~output_o ;

assign S[1] = \S[1]~output_o ;

assign S[0] = \S[0]~output_o ;

endmodule
